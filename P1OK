#include <iostream>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/ipc.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sstream>
#include <time.h>
#include <sys/time.h>
#include <unistd.h>
#include <math.h>
#include <algorithm>
#include <sys/sem.h>
#include <semaphore.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/wait.h>
using namespace std;

char msgs[60][10];
double times[60];
double tmid[60];
int pho[10];
bool arrive[60];
double d[3][3] = { { 0, 0.500, 0.300 }, { 0.400, 0, 0.550 }, { 0.350, 0.550, 0 } };
sem_t* sem_id[5];
pid_t p2_pid[5];
FILE *myexcel;

const int MSGSIZE=60;
const int TEST_SIZE=1;

//计算快照答案
void caculatePhotoResult(){
    int result[3][3];
    
    fprintf(myexcel, "%s\n", "\nphoto result is ");
    //计算快照结果
    for (int i = 0; i < 10; i++)
    {
            //初始化快照
        for(int k=0; k<3; k++)
        {
            for(int j=0; j<3; j++)
            {
                if(k==j)
                {
                    result[k][j]=100;
                }
                else
                {
                    result[k][j]=0;
                }
            }
        }
        int s = pho[i];//获取快照顺序
        int start = msgs[s][5] - '0' - 1;//获取快照发起点
        for (int j = 0; j < 60; j++ )
        {
            int type = msgs[j][1];
            if (type == '1')
            {
                int a = msgs[j][3] - '1';
                if(times[j]>times[s] + d[start][a])//如果这条消息的时间晚于快照时间+快照发起点到其他通道的长度，可以结束这条快照的计算
                    break;
                int b = msgs[j][5] - '1';
                int amount = (msgs[j][6] - '0') * 100 + (msgs[j][7] - '0') * 10 + (msgs[j][8] - '0');
                if (times[j] < times[s] + d[start][a]) //计算已经发送的资源
                {
                    result[a][a] -= amount;
                }
                if (times[j] + d[a][b] < times[s] + d[start][b]) //计算接收到的资源
                {
                    result[b][b] += amount;
                }
                //计算通道内的内容
                if (!(a == start))
                {
                    if ((times[j]>times[s] + d[start][b]-d[a][b]) && (times[j] < times[s] + d[start][a]))
                    {
                        result[a][b] += amount;
                    }
                }
            }
        }
        //结果写进文件
        fprintf(myexcel, "%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n\n", i+1,result[0][0],result[1][1],result[2][2],result[0][1],result[1][0],result[0][2],result[2][0],result[1][2],result[2][1]);       
    }
}

void genRand(){
    double tSum=0;//当前总时间
    double R;
    double t;
    int current[3][3] = { { 100, 0, 0 }, { 0, 100, 0 }, { 0, 0, 100 } };//初始化当前资源数

    //生成10个不同随机数（0-59）并排序，用于快照
    for (int i = 0; i < 10;)
    {
        int c = rand() % 60;
        bool tag = true;
        for (int j = 0; j < i; j++)
        {
            if (pho[j] == c)
            {
                tag = false;
                break;
            }
        }
        if (tag)
        {
            pho[i] = c;
            i++;
        }
    }
        sort(pho,pho+10);//将生成快照类型顺序排序

        tSum = 0;
        int pp=0;//快照生成个数
        int i = 0;

        while (i<60)
        {
            if (i!=pho[pp])//如果是生成快照命令
            {
                int a, b, c;
                do
                {
                    a = rand() % 3;
                }
                while (current[a][a] == 0);//保证源点资源数不为0

                //保证a！=b=b
                do
                {
                    b = rand() % 3;
                }
                while (a == b);
                c = (rand() % (current[a][a])) + 1;

                current[a][a] -= c;
                current[a][b] += c;
                sprintf(msgs[i], "01%02d%02d%03d", a + 1, b + 1, c);
            }
            else //如果是快照类型
            {
                pp++;
                int b = rand() % 3;
                sprintf(msgs[i], "02%02d%02d", pp, b + 1);
            }

            //生成随机时间
            R = ((double)rand()) / RAND_MAX;
            t = -2 * log(R);
            if(t<0.05)//保证t>=0.05s
                t=0.05;

            tmid[i]=t;
            tSum += t;
            times[i] = tSum;//消息发出时间
            //计算实时资源数量
            for (int j = 0; j <= i; j++)
            {
                if (!arrive[j])//如果该资源还没到
                {
                    int cc = msgs[j][1] - '0';
                    if (cc==1)
                    {
                        int a = msgs[j][3] - '0' - 1;
                        int b = msgs[j][5] - '0' - 1;
                        if ((tSum - times[j])>d[a][b])//如果当前时间>发出时间+通道长度，则使资源到达，修改通道上资源数和目的点资源数，并标记该资源为到达
                        {
                            arrive[j] = true;
                            int c = (msgs[j][6] - '0') * 100 + (msgs[j][7] - '0') * 10 + (msgs[j][8] - '0');
                            current[a][b] -= c;
                            current[b][b] += c;
                        }
                    }
                }
            }
            i++;
        }
    }
//启动p2
    void createsubprocess()
    {
        const char *P2_PATH[5] = {"./P2-group1", "./P2-group2", "./P2-group3", "./P2-group4", "./P2-group5"};
        const char *P2_NAME[5] = {"P2-group1", "P2-group2", "P2-group3", "P2-group4", "P2-group5"};

    for (int n = 0; n < TEST_SIZE; n++) {//按顺序启动前面TEST_SIZE个程序
        p2_pid[n] = fork();
        if(p2_pid[n]<0)
        {
            perror("fork error!\n");
            exit(1);
        }
        else if (p2_pid[n] == 0) {
            execl(P2_PATH[n], P2_NAME[n], NULL);
        }
    }
}

int main()
{
    myexcel=fopen("out.txt", "w");

    for (int i = 0; i < 60; i++)//初始化
    {
        arrive[i] = false;
        times[i] = 0;
    }
    int seed;//输入种子
    cin>>seed;
    srand(seed);

    //生成随机时间和随即消息
    genRand();

    //创建共享内存，并初始化为0
    key_t shm_key[TEST_SIZE];
    int shm_id[TEST_SIZE];
    char *buf[TEST_SIZE];
    for (int n = 0; n < TEST_SIZE; n++)
    {
        shm_key[n] = ftok("/tmp/shm_demo", 101 + n);
        if(shm_key[n]==-1){
            cout<<"shm_key"<<n<<" faied"<<endl;
        }
        shm_id[n] = shmget(shm_key[n], 10, IPC_CREAT | 0666);
        buf[n] = (char *) shmat(shm_id[n], NULL, 0);
        for (int i = 0; i < 10; ++i)
        {
            buf[n][i]='0';
        }
    }

    //open P2
    createsubprocess();
    sleep(10);
    
    //写入内存并微调时间，把结果写入文件
    cout<<"--P1--- writing!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"<<endl;
    double tSum=0;
    for(int i=0; i<MSGSIZE; i++)
    {
        double t=tmid[i];

        //保证时间的合理性
        struct timeval tv;
        gettimeofday (&tv , NULL);
        int msNow=tv.tv_usec/1000;//当前ms级时间
        int imgT=msNow+t*1000;//如果不修改t，发送消息的时间（ms级）

        if(msgs[i][1]=='1'){//如果是01类型消息，保证能%50
            imgT=ceil((double)imgT/50)*50;
            t=(double)(imgT-msNow)/1000;
        }else{                //如果是02类型消息，保证和%50相隔10ms
            if(11>imgT%50){
                t+=(double)(11-imgT%50)/1000;
            }
            else if(imgT%50>39){
                t+=(double)(61-imgT%50)/1000;
            }
        }   
        tSum+=t;
        times[i]=tSum;
        usleep(t*1000000);
        for (int j = 0; j < TEST_SIZE; ++j)
        {
            snprintf(buf[j], 10,msgs[i]);
        }
        cout<<" t= "<<t<<endl;
        fprintf(myexcel, "%d\t%s\t%f\n",i+1, msgs[i], t);
        cout<<i<<" "<<msgs[i]<<endl;
    }
    //删除共享内存，等待所有P2结束
    for (int i = 0; i < TEST_SIZE; ++i)
    {
        shmctl(shm_id[i], IPC_RMID, 0);
        int status;
        waitpid(p2_pid[i], &status, 0);
    }
    caculatePhotoResult();//计算快照答案
    fclose(myexcel); //关闭文件
    cout<<"total time: "<<tSum<<endl;
    return 0;
}
