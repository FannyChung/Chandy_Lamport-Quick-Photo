#include <iostream>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/ipc.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sstream>
#include <time.h>
#include <unistd.h>
#include <math.h>
#include <algorithm>
#include <sys/sem.h>
#include <semaphore.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/wait.h>
using namespace std;

char msgs[60][10];
double times[60];
int pho[10];
bool arrive[60];
double d[3][3] = { { 0, 0.500, 0.300 }, { 0.400, 0, 0.550 }, { 0.350, 0.550, 0 } };
sem_t* sem_id[5];
int id[5]={0,0,0,0,0};
char SEM_NAME[5][10]= {"PV1","PV2","PV3","PV4","PV5"};
FILE *myexcel;

//计算快照答案
void caculatePhotoResult(){
    int result[10][3][3];

    for(int k=0; k<10; k++)
    {
        for(int i=0; i<3; i++)
        {
            for(int j=0; j<3; j++)
            {
                if(i==j)
                {
                    result[k][i][j]=100;
                }
                else
                {
                    result[k][i][j]=0;
                }
            }
        }
    }
    cout<<" photo result is "<<endl;
    fprintf(myexcel, "%s\n",  "\nphoto result is ");
    //caculate photo
    for (int i = 0; i < 10; i++)
    {
        int s = pho[i];
        int start = msgs[s][5] - '0' - 1;
        for (int j = 0; j < 60; j++ )
        {
            if(times[j]>times[s] + d[start][a])
                break;
            int type = msgs[j][1];
            if (type == '1')
            {
                int a = msgs[j][3] - '1';
                int b = msgs[j][5] - '1';
                int amount = (msgs[j][6] - '0') * 100 + (msgs[j][7] - '0') * 10 + (msgs[j][8] - '0');
                if (times[j] < times[s] + d[start][a]) //send
                {
                    result[i][a][a] -= amount;
                }
                if (times[j] + d[a][b] < times[s] + d[start][b]) //receive
                {
                    result[i][b][b] += amount;
                }
                //caculate the tongdao
                if (!(a == start))
                {
                    if ((times[j]>times[s] + d[start][b]-d[a][b]) && (times[j] < times[s] + d[start][a]))
                    {
                        result[i][a][b] += amount;
                    }
                }
            }
        }
        int sum=0;
        for (int j = 0; j < 3; j++)
        {
            for (int k = 0; k < 3; k++)
            {
                sum+=result[i][j][k];
                cout << result[i][j][k] << '\t';
                fprintf(myexcel, "%d\t",  result[i][j][k]);
            }
            cout << endl;
            fprintf((myexcel), "\n");
        }
        cout << endl;
        if(sum!=300){
            cout<<"wrong!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"<<endl;
        }
        fprintf((myexcel), "\n");
    }
}
void genRand(){
    double tSum=0;
    double R;
    double t;
    int current[3][3] = { { 100, 0, 0 }, { 0, 100, 0 }, { 0, 0, 100 } };

        for (int i = 0; i < 10;)
        {
            int c = rand() % 60;
            bool tag = true;
            for (int j = 0; j < i; j++)
            {
                if (pho[j] == c)
                {
                    tag = false;
                    break;
                }
            }
            if (tag)
            {
                pho[i] = c;
                i++;
            }
        }
        sort(pho,pho+10);
        tSum = 0;
        int pp=0;
        int i = 0;
        while (i<60)
        {
            //display currrent state
            cout << endl;
            cout << "当前状态：  "<<endl;
            for (int mm = 0; mm < 3; mm++)
            {
                for (int nn = 0; nn < 3; nn++)
                {
                    cout << current[mm][nn] << "\t";
                }
                cout << endl;
            }
            cout << "次数： " << i << endl;
            //ziyuan chuandi
            if (i!=pho[pp])
            {
                int a, b, c;
                do
                {
                    a = rand() % 3;
                }
                while (current[a][a] == 0);
                //a！=b
                do
                {
                    b = rand() % 3;
                }
                while (a == b);
                c = (rand() % (current[a][a])) + 1;

                current[a][a] -= c;
                current[a][b] += c;
                sprintf(msgs[i], "01%02d%02d%03d", a + 1, b + 1, c);
                cout << msgs[i] << endl;
            }
            else
            {
                pp++;
                int b;
                b = rand() % 3;

                sprintf(msgs[i], "02%02d%02d", pp, b + 1);
                cout << msgs[i] << endl;
                //fprintf(myexcel, "%f\n", t);
            }
            //gen time
            R = ((double)rand()) / RAND_MAX;
            t = -2 * log(R);
            if(t<0.05)
                t=0.05;
            

            tSum += t;
            times[i] = tSum;
            cout << "time = " << t<<endl;
            //ziyuan daoda
            for (int j = 0; j <= i; j++)
            {
                if (!arrive[j])
                {
                    int cc = msgs[j][1] - '0';
                    if (cc==1)
                    {
                        int a = msgs[j][3] - '0' - 1;
                        int b = msgs[j][5] - '0' - 1;
                        if ((tSum - times[j])>d[a][b])
                        {
                            arrive[j] = true;
                            int c = (msgs[j][6] - '0') * 100 + (msgs[j][7] - '0') * 10 + (msgs[j][8] - '0');
                            current[a][b] -= c;
                            current[b][b] += c;
                            cout << a + 1 << " arrives at " << b + 1 << " amount: " << c << endl;
                            cout << endl;
                        }
                    }
                }
            }
            i++;
        }
}
void createsubprocess(int num,int max)    
{    
    pid_t pid;
    if(num>=max)return;    
    pid=fork();    
    if(pid<0)    
    {    
        perror("fork error!\n");    
        exit(1);    
    }    
    //子进程    
    else if(pid==0)    
    {      
        id[num] = getpid();
        if(id[0]==getpid()){
            cout<<"child id"<<id[0]<<endl;
            if (execl ("./read1","read1",NULL) < 0) {
                        printf ("execl error\n");
                }
            }else if(id[1]==getpid()){
            cout<<"child id"<<id[1]<<endl;
                if (execl ("./read2",NULL,NULL) < 0) {
                        printf ("execl error\n");
                    }
                }else if(id[2]==getpid()){
            cout<<"child id"<<id[2]<<endl;
                if (execl ("./read3",NULL,NULL) < 0) {
                        printf ("execl error\n");
                    }
                }else if(id[3]==getpid()){
                cout<<"child id"<<id[3]<<endl;
                   if (execl ("./read4",NULL,NULL) < 0) {
                        printf ("execl error\n");
                    }
                }else if(id[4]==getpid()){
                cout<<"child id"<<id[4]<<endl;
                if (execl ("./read5",NULL,NULL) < 0) {
                        printf ("execl error\n");
                    }
                }
    }    
    //父进程    
    else  
    {    
        num++;    
        if(num==1)
            cout<<"父进程id= "<<getpid()<<endl;    
        if(num<max)
            createsubprocess(num,max);    
        sleep(1);       
    }    
}
int main()
{
    myexcel=fopen("out.txt", "w");

    for (int i = 0; i < 60; i++)
    {
        arrive[i] = false;
        times[i] = 0;
    }
    int seed;
    cin>>seed;
    srand(seed);

    //generate rand 
    genRand();

    //create neicun, init to 0
    key_t shm_key[5];
    int shm_id[5];
    char *buf[5];
    for (int n = 0; n < 5; n++)
    {
        shm_key[n] = ftok("/tmp/shm_demo", 101 + n);
        if(shm_key[n]==-1){
            cout<<"shm_key"<<n<<" faied"<<endl;
        }
        shm_id[n] = shmget(shm_key[n], 10, IPC_CREAT | 0666);
        buf[n] = (char *) shmat(shm_id[n], NULL, 0);
        for (int i = 0; i < 10; ++i)
        {
            buf[n][i]='0';
        }
    }

    //create semphore
    for (int i = 0; i < 5; ++i)
    {
         sem_id[i] = sem_open(SEM_NAME[i],O_CREAT,0644,1);
         if(sem_id[i] == SEM_FAILED)
            {
                perror("unable to create semaphore");
                sem_unlink(SEM_NAME[i]);
                exit(-1);
            }
    }

    //open P2
    createsubprocess(0,5);

    //write  &  genresult
    for(int i=0; i<60; i++)
    {
        double t;
        if(i==0){
            t=times[i];
        }
        t=times[i]-times[i-1];
        
        //sleep(t);
        cout<<" t= "<<t<<endl;
        fprintf(myexcel, "%s\t", msgs[i]);
        fprintf(myexcel, "%f\n", t);

        for (int j = 0; j < 5; ++j)
        {
            sem_wait(sem_id[j]);
            snprintf(buf[0], 10, msgs[i]);
            sem_post(sem_id[j]);
        }
       
        cout<<i<<" "<<msgs[i]<<endl;
    }

    //shanchu gongxiang neicun & xinhaoliang
    for (int i = 0; i < 5; ++i)
    {
        sem_close(sem_id[i]);
        shmctl(shm_id[i], IPC_RMID, 0);
        sem_unlink(SEM_NAME[i]);
        int states;
        waitpid(id[i],&states,0);
    }  
    caculatePhotoResult();
    fclose(myexcel); //写入刚才读取的文件
    return  0;
}


